{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["\"use strict\";\r\nclass Tile {\r\n\tuncovered = false;\r\n\thasMine = false;\r\n\tnumOfNearbyMines = 0;\r\n\tmarkedAsEmpty = false;\r\n}\r\n\r\nlet settings = {\r\n\tboard: {\r\n\t\trows: 10,\r\n\t\tcolumns: 10,\r\n\t\tnumOfMines: 20,\r\n\t},\r\n};\r\n\r\nconst gameVars = {\r\n\tstate: \"initial\", // 3 states available: initial (new game started, waiting for player to uncover first tile), underway (game in progress), finished (game won or lost, no input allowed on board)\r\n\tminesLeft: 20,\r\n\ttime: {\r\n\t\tminutes: 0,\r\n\t\tseconds: 0,\r\n\t},\r\n\trowMineCount: [],\r\n\tcolumnMineCount: [],\r\n};\r\n\r\nlet statistics = {\r\n\tsmall: {\r\n\t\t// Games won/lost/played, best time, longest winning/losing streaks, current streak\r\n\t\tgamesWon: 0,\r\n\t\tgamesLost: 0,\r\n\t\tbestTime: \"\",\r\n\t\tlongestWinningStreak: 0,\r\n\t\tlongestLosingStreak: 0,\r\n\t\tcurrentStreak: 0\r\n\t},\r\n\tmedium: {\r\n\t\tgamesWon: 0,\r\n\t\tgamesLost: 0,\r\n\t\tbestTime: \"\",\r\n\t\tlongestWinningStreak: 0,\r\n\t\tlongestLosingStreak: 0,\r\n\t\tcurrentStreak: 0\r\n\t},\r\n\tlarge: {\r\n\t\tgamesWon: 0,\r\n\t\tgamesLost: 0,\r\n\t\tbestTime: \"\",\r\n\t\tlongestWinningStreak: 0,\r\n\t\tlongestLosingStreak: 0,\r\n\t\tcurrentStreak: 0\r\n\t},\r\n\tcustom: {\r\n\t\tgamesWon: 0,\r\n\t\tgamesLost: 0,\r\n\t\tlongestWinningStreak: 0,\r\n\t\tlongestLosingStreak: 0,\r\n\t\tcurrentStreak: 0\r\n\t},\r\n};\r\n\r\nlet clockInterval;\r\n\r\nlet board = [];\r\n\r\nfunction byId(id) {\r\n\treturn document.getElementById(id);\r\n}\r\nconst DOM = {\r\n\tnav: {\r\n\t\tmenuBtn: byId(\"menu-btn\"),\r\n\t\tsettingsBtn: byId(\"settings-btn\"),\r\n\t\tnewGameBtn: byId(\"newgame-btn\"),\r\n\t\tmineCounter: document.querySelector(\"#mine-counter > span\"),\r\n\t\ttimer: {\r\n\t\t\tminutes: byId(\"timer-minutes\"),\r\n\t\t\tseconds: byId(\"timer-seconds\"),\r\n\t\t},\r\n\t},\r\n\tplayarea: {\r\n\t\tcolumnNums: byId(\"column-nums\"),\r\n\t\trowNums: byId(\"row-nums\"),\r\n\t\tboard: {\r\n\t\t\ttiles: null,\r\n\t\t\tcontainer: byId(\"board\"),\r\n\t\t},\r\n\t\twinOverlay: {\r\n\t\t\tcontainer: byId(\"win-overlay\"),\r\n\t\t\tnewGameBtn: byId(\"win-new-game-btn\"),\r\n\t\t\tviewBoardBtn: byId(\"win-view-board-btn\"),\r\n\t\t},\r\n\t\tloseOverlay: {\r\n\t\t\tcontainer: byId(\"lose-overlay\"),\r\n\t\t\tnewGameBtn: byId(\"lose-new-game-btn\"),\r\n\t\t\tviewBoardBtn: byId(\"lose-view-board-btn\"),\r\n\t\t},\r\n\t},\r\n\tmodals: {\r\n\t\tcontainer: byId(\"modals\"),\r\n\t\tmenu: {\r\n\t\t\tcontainer: byId(\"menu-modal\"),\r\n\t\t\tbtns: byId(\"menu-modal-btns\"),\r\n\t\t},\r\n\t\tsettings: {\r\n\t\t\tcontainer: byId(\"settings-modal\"),\r\n\t\t},\r\n\t},\r\n};\r\n\r\nfunction createEmptyBoard() {\r\n\tboard = [];\r\n\tfor (let i = 0; i < settings.board.rows; i++) {\r\n\t\tboard[i] = [];\r\n\t\tfor (let j = 0; j < settings.board.columns; j++) {\r\n\t\t\tboard[i][j] = new Tile();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction populateBoard(firstTileRow, firstTileColumn, numOfMines) {\r\n\tlet values = [];\r\n\tfor (let i = 0; i < settings.board.rows; i++) {\r\n\t\tfor (let j = 0; j < settings.board.columns; j++) {\r\n\t\t\tvalues.push({\r\n\t\t\t\trow: i,\r\n\t\t\t\tcolumn: j\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tgameVars.rowMineCount = new Array(settings.board.rows).fill(0);\r\n\tgameVars.columnMineCount = new Array(settings.board.columns).fill(0);\r\n\r\n\tlet firstTile = values.findIndex((tile) => {\r\n\t\treturn tile.row == firstTileRow && tile.column == firstTileColumn;\r\n\t});\r\n\r\n\tif (firstTile != -1) {\r\n\t\tvalues.splice(firstTile, 1);\r\n\t}\r\n\tboard[firstTileRow][firstTileColumn].hasMine = true;\r\n\r\n\tfor (let i = 1; i < numOfMines; i++) {\r\n\t\tlet random = Math.floor(Math.random() * values.length);\r\n\t\tboard[values[random].row][values[random].column].hasMine = true;\r\n\t\tvalues.splice(random, 1);\r\n\t}\r\n\r\n\t// Assign numbers to each tile, and count mines in each row and column\r\n\tfor (let row in board) {\r\n\t\tfor (let column in board[row]) {\r\n\t\t\tcountNearbyMines(parseInt(row), parseInt(column));\r\n\t\t\tif (board[row][column].hasMine) {\r\n\t\t\t\tgameVars.rowMineCount[row]++;\r\n\t\t\t\tgameVars.columnMineCount[column]++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction checkIfTileHasMine(row, column) {\r\n\tif (\r\n\t\trow < 0 ||\r\n\t\trow >= settings.board.rows ||\r\n\t\tcolumn < 0 ||\r\n\t\tcolumn >= settings.board.columns ||\r\n\t\t!board[row][column].hasMine\r\n\t) {\r\n\t\treturn 0;\r\n\t} else {\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\nfunction countNearbyMines(row, column) {\r\n\tlet count = 0;\r\n\tfor (let i = -1; i <= 1; i++) {\r\n\t\tfor (let j = -1; j <= 1; j++) {\r\n\t\t\tif (i == 0 && j == 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tcount += checkIfTileHasMine(row + i, column + j);\r\n\t\t}\r\n\t}\r\n\tboard[row][column].numOfNearbyMines = count;\r\n}\r\n\r\nfunction displayEmptyBorderNums() {\r\n\tlet html = \"\";\r\n\r\n\tfor (let i = 0; i < settings.board.rows; i++) {\r\n\t\thtml += `<div>#</div>`;\r\n\t}\r\n\tDOM.playarea.rowNums.innerHTML = html;\r\n\thtml = \"\";\r\n\r\n\tfor (let i = 0; i < settings.board.columns; i++) {\r\n\t\thtml += `<div>#</div>`;\r\n\t}\r\n\tDOM.playarea.columnNums.innerHTML = html;\r\n}\r\n\r\nfunction displayBorderNums() {\r\n\tlet html = \"\";\r\n\r\n\tfor (let row of gameVars.rowMineCount) {\r\n\t\thtml += `<div>${row}</div>`;\r\n\t}\r\n\tDOM.playarea.rowNums.innerHTML = html;\r\n\thtml = \"\";\r\n\r\n\tfor (let column of gameVars.columnMineCount) {\r\n\t\thtml += `<div>${column}</div>`;\r\n\t}\r\n\tDOM.playarea.columnNums.innerHTML = html;\r\n}\r\n\r\nfunction displayBoard() {\r\n\tlet html = \"\";\r\n\tfor (let row in board) {\r\n\t\thtml += `<div>`;\r\n\t\tfor (let column in board[row]) {\r\n\t\t\thtml += `<div data-row=\"${row}\" data-column=\"${column}\"></div>`;\r\n\t\t}\r\n\t\thtml += \"</div>\";\r\n\t}\r\n\tDOM.playarea.board.container.innerHTML = html;\r\n\tDOM.playarea.board.tiles = document.querySelectorAll(\r\n\t\t\"[data-row][data-column]\"\r\n\t);\r\n\r\n\tfor (let tile of DOM.playarea.board.tiles) {\r\n\t\ttile.addEventListener(\"mousedown\", (evt) => {\r\n\t\t\tswitch (evt.which) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\ttileClick(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\ttileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t\ttile.addEventListener(\"contextmenu\", (evt) => {\r\n\t\t\tevt.preventDefault();\r\n\t\t\treturn false;\r\n\t\t});\r\n\t\ttile.addEventListener(\"mouseenter\", (evt) => {\r\n\t\t\tif (evt.which == 3) {\r\n\t\t\t\ttileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction tileClick(row, column) {\r\n\tif (gameVars.state == \"initial\") {\r\n\t\tgameVars.state = \"underway\";\r\n\t\tpopulateBoard(row, column, settings.board.numOfMines);\r\n\t\tdisplayBorderNums();\r\n\t\tuncoverTile(row, column);\r\n\t\tDOM.nav.mineCounter.innerHTML = gameVars.minesLeft;\r\n\t\tclockInterval = setInterval(tickClock, 1000);\r\n\t\tif (gameVars.xyzzyActivated) {\r\n\t\t\txyzzyInit();\r\n\t\t}\r\n\t} else if (gameVars.state == \"underway\") {\r\n\t\tuncoverTile(row, column);\r\n\t\tDOM.nav.mineCounter.innerHTML = gameVars.minesLeft;\r\n\t}\r\n}\r\n\r\nfunction tileMark(row, column) {\r\n\tif (gameVars.state == \"underway\" && !board[row][column].uncovered) {\r\n\t\tboard[row][column].markedAsEmpty = !board[row][column].markedAsEmpty;\r\n\t\tif (board[row][column].markedAsEmpty) {\r\n\t\t\tgetDOMTile(row, column).innerHTML = \"X\";\r\n\t\t} else {\r\n\t\t\tgetDOMTile(row, column).innerHTML = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction getDOMTile(row, column) {\r\n\treturn DOM.playarea.board.container.querySelector(\r\n\t\t`[data-row=\"${row}\"][data-column=\"${column}\"]`\r\n\t);\r\n}\r\n\r\nfunction uncoverTile(row, column, fromMineClick = false, override = false) {\r\n\tif (\r\n\t\t(gameVars.state != \"underway\" && !override) ||\r\n\t\trow < 0 ||\r\n\t\trow >= settings.board.rows ||\r\n\t\tcolumn < 0 ||\r\n\t\tcolumn >= settings.board.columns ||\r\n\t\tboard[row][column].uncovered\r\n\t) {\r\n\t\treturn null;\r\n\t}\r\n\tif (board[row][column].hasMine && !board[row][column].markedAsEmpty) {\r\n\t\tgetDOMTile(row, column).innerHTML = \"<i class='icon-mine'></i>\";\r\n\t\tgetDOMTile(row, column).dataset.clickable = \"false\";\r\n\t\tboard[row][column].uncovered = true;\r\n\t\tfor (let i = -1; i <= 1; i++) {\r\n\t\t\tfor (let j = -1; j <= 1; j++) {\r\n\t\t\t\tif (i == 0 && j == 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tuncoverTile(row + i, column + j, true, override);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgameVars.minesLeft--;\r\n\t\tif (gameVars.minesLeft == 0 && gameVars.state == \"underway\") {\r\n\t\t\tDOM.playarea.winOverlay.container.classList.remove(\"fade\");\r\n\t\t\tDOM.playarea.winOverlay.container.classList.add(\"visible\");\r\n\t\t\tDOM.playarea.board.container.classList.add(\"no-input\");\r\n\t\t\tgameVars.state = \"finished\";\r\n\t\t\tclearInterval(clockInterval);\r\n\t\t}\r\n\t} else if (fromMineClick) {\r\n\t\tboard[row][column].uncovered = true;\r\n\t\tboard[row][column].markedAsEmpty = false;\r\n\t\tgetDOMTile(row, column).innerHTML = board[row][column].numOfNearbyMines;\r\n\t\tgetDOMTile(row, column).dataset.clickable = \"false\";\r\n\t} else if (\r\n\t\t!board[row][column].markedAsEmpty &&\r\n\t\tgameVars.state == \"underway\"\r\n\t) {\r\n\t\tgetDOMTile(row, column).classList.add(\"wrong-tile\");\r\n\t\tDOM.playarea.loseOverlay.container.classList.remove(\"fade\");\r\n\t\tDOM.playarea.loseOverlay.container.classList.add(\"visible\");\r\n\t\tDOM.playarea.board.container.classList.add(\"no-input\");\r\n\t\tgameVars.state = \"finished\";\r\n\t\tclearInterval(clockInterval);\r\n\t}\r\n}\r\n\r\nfunction tickClock() {\r\n\tgameVars.time.seconds++;\r\n\tif (gameVars.time.seconds >= 60) {\r\n\t\tgameVars.time.seconds -= 60;\r\n\t\tgameVars.time.minutes++;\r\n\t}\r\n\r\n\tif (gameVars.time.minutes <= 9) {\r\n\t\tDOM.nav.timer.minutes.innerHTML = `0${gameVars.time.minutes}`;\r\n\t} else {\r\n\t\tDOM.nav.timer.minutes.innerHTML = gameVars.time.minutes;\r\n\t}\r\n\tif (gameVars.time.seconds <= 9) {\r\n\t\tDOM.nav.timer.seconds.innerHTML = `0${gameVars.time.seconds}`;\r\n\t} else {\r\n\t\tDOM.nav.timer.seconds.innerHTML = gameVars.time.seconds;\r\n\t}\r\n}\r\n\r\nfunction uncoverBoard() {\r\n\tfor (let row in board) {\r\n\t\tfor (let column in board[row]) {\r\n\t\t\tif (board[row][column].hasMine && !board[row][column].uncovered) {\r\n\t\t\t\tboard[row][column].markedAsEmpty = false;\r\n\t\t\t\tuncoverTile(parseInt(row), parseInt(column), false, true);\r\n\t\t\t} else if (\r\n\t\t\t\t!board[row][column].hasMine &&\r\n\t\t\t\tboard[row][column].numOfNearbyMines == 0\r\n\t\t\t) {\r\n\t\t\t\tgetDOMTile(row, column).innerHTML = \"#\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction newGame() {\r\n\tcreateEmptyBoard();\r\n\tdisplayBoard();\r\n\tdisplayEmptyBorderNums();\r\n\tgameVars.state = \"initial\";\r\n\tclearInterval(clockInterval);\r\n\tgameVars.time.minutes = 0;\r\n\tgameVars.time.seconds = 0;\r\n\tDOM.nav.timer.minutes.innerHTML = \"00\";\r\n\tDOM.nav.timer.seconds.innerHTML = \"00\";\r\n\tDOM.playarea.board.container.classList.remove(\"no-input\");\r\n\tDOM.nav.mineCounter.innerHTML = gameVars.minesLeft =\r\n\t\tsettings.board.numOfMines;\r\n}\r\n\r\nDOM.nav.newGameBtn.addEventListener(\"click\", () => {\r\n\tnewGame();\r\n});\r\n\r\ndocument.querySelectorAll(\"[data-modalopen]\").forEach((el) => {\r\n\tel.addEventListener(\"click\", () => {\r\n\t\tDOM.modals.container.classList.add(\"visible\");\r\n\t\tDOM.modals.container.classList.remove(\"fade\");\r\n\t\tdocument.querySelector(el.dataset.modalopen).classList.add(\"visible\");\r\n\t\tdocument.querySelector(el.dataset.modalopen).classList.remove(\"fade\");\r\n\t});\r\n});\r\ndocument.querySelectorAll(\".modal-close\").forEach((el) => {\r\n\tel.addEventListener(\"click\", () => {\r\n\t\tDOM.modals.container.classList.add(\"fade\");\r\n\t\tDOM.modals.container.classList.remove(\"visible\");\r\n\t\tel.parentNode.parentNode.classList.add(\"fade\");\r\n\t\tel.parentNode.parentNode.classList.remove(\"visible\");\r\n\t});\r\n});\r\ndocument.querySelectorAll(\".modal\").forEach(el => {\r\n\tel.addEventListener(\"click\", evt => {\r\n\t\tif (evt.target === evt.currentTarget) {\r\n\t\t\tDOM.modals.container.classList.add(\"fade\");\r\n\t\t\tDOM.modals.container.classList.remove(\"visible\");\r\n\t\t\tel.classList.add(\"fade\");\r\n\t\t\tel.classList.remove(\"visible\");\r\n\t\t}\r\n\t})\r\n})\r\nDOM.modals.menu.btns.querySelectorAll(\"button\").forEach((el) => {\r\n\tel.addEventListener(\"click\", () => {\r\n\t\tDOM.modals.menu.container.classList.add(\"fade\");\r\n\t\tDOM.modals.menu.container.classList.remove(\"visible\");\r\n\t});\r\n});\r\n\r\nDOM.playarea.winOverlay.newGameBtn.addEventListener(\"click\", () => {\r\n\tnewGame();\r\n\tDOM.playarea.winOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.winOverlay.container.classList.remove(\"visible\");\r\n});\r\nDOM.playarea.winOverlay.viewBoardBtn.addEventListener(\"click\", () => {\r\n\tDOM.playarea.winOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.winOverlay.container.classList.remove(\"visible\");\r\n});\r\nDOM.playarea.loseOverlay.newGameBtn.addEventListener(\"click\", () => {\r\n\tnewGame();\r\n\tDOM.playarea.loseOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.loseOverlay.container.classList.remove(\"visible\");\r\n});\r\nDOM.playarea.loseOverlay.viewBoardBtn.addEventListener(\"click\", () => {\r\n\tDOM.playarea.loseOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.loseOverlay.container.classList.remove(\"visible\");\r\n\tuncoverBoard();\r\n});\r\nnewGame();\r\n\r\n// Value Bubbles for Range Inputs\r\n// https://codepen.io/chriscoyier/pen/eYNQyPe\r\n\r\nconst allRanges = document.querySelectorAll(\".range-wrap\");\r\nallRanges.forEach(wrap => {\r\n  const range = wrap.querySelector('[type=\"range\"]');\r\n  const bubble = wrap.querySelector(\".bubble\");\r\n\r\n  range.addEventListener(\"input\", () => {\r\n    setBubble(range, bubble);\r\n  });\r\n  setBubble(range, bubble);\r\n});\r\n\r\nfunction setBubble(range, bubble) {\r\n  const val = range.value;\r\n  const min = range.min ? range.min : 0;\r\n  const max = range.max ? range.max : 100;\r\n  const newVal = Number(((val - min) * 100) / (max - min));\r\n  bubble.innerHTML = val;\r\n\r\n  // Sorta magic numbers based on size of the native UI thumb\r\n  bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;\r\n}\r\n\r\nlet xyzzyPassword = \"xyzzy\";\r\nlet passwordPosition = 0;\r\nlet xyzzyPixel = byId(\"xyzzypixel\");\r\ndocument.onkeydown = (evt) => {\r\n\tif (evt.key == xyzzyPassword[passwordPosition]) {\r\n\t\tpasswordPosition++;\r\n\t} else {\r\n\t\tpasswordPosition = 0;\r\n\t}\r\n\tif (passwordPosition >= 5) {\r\n\t\txyzzyInit();\r\n\t\tgameVars.xyzzyActivated = true;\r\n\t\tdocument.onkeydown = (evt) => {\r\n\t\t\tif (evt.key == \"Shift\") {\r\n\t\t\t\tgameVars.xyzzyShift = true;\r\n\t\t\t}\r\n\t\t};\r\n\t\tdocument.onkeyup = (evt) => {\r\n\t\t\tif (evt.key == \"Shift\") {\r\n\t\t\t\tgameVars.xyzzyShift = false;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n};\r\n\r\nfunction xyzzyInit() {\r\n\tDOM.playarea.board.tiles.forEach((el) => {\r\n\t\tel.addEventListener(\"mouseover\", () => {\r\n\t\t\tif (gameVars.xyzzyShift) {\r\n\t\t\t\tif (board[el.dataset.row][el.dataset.column].hasMine) {\r\n\t\t\t\t\txyzzyPixel.style.backgroundColor = \"#000\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\txyzzyPixel.style.backgroundColor = \"#FFF\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}"],"names":["$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$Tile","[object Object]","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$settings","rows","columns","numOfMines","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$gameVars","state","minesLeft","time","minutes","seconds","rowMineCount","columnMineCount","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$clockInterval","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$board","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$byId","id","document","getElementById","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$DOM","nav","menuBtn","settingsBtn","newGameBtn","mineCounter","querySelector","timer","playarea","columnNums","rowNums","board","tiles","container","winOverlay","viewBoardBtn","loseOverlay","modals","menu","btns","settings","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$checkIfTileHasMine","row","column","hasMine","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$countNearbyMines","count","i","j","numOfNearbyMines","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileClick","firstTileRow","firstTileColumn","values","push","Array","fill","firstTile","findIndex","tile","splice","i1","random","Math","floor","length","parseInt","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$populateBoard","html","innerHTML","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBorderNums","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverTile","setInterval","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tickClock","xyzzyActivated","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$xyzzyInit","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileMark","uncovered","markedAsEmpty","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$getDOMTile","fromMineClick","override","dataset","clickable","classList","remove","add","clearInterval","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$newGame","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$createEmptyBoard","querySelectorAll","addEventListener","evt","which","preventDefault","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBoard","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayEmptyBorderNums","forEach","el","modalopen","parentNode","target","currentTarget","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverBoard","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$setBubble","range","bubble","val","value","min","max","newVal","Number","style","left","wrap","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$passwordPosition","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$xyzzyPixel","xyzzyShift","backgroundColor","onkeydown","key","evt1","onkeyup"],"version":3,"file":"index.29e9c8d4.js.map"}