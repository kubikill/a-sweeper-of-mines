{"mappings":"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","sources":["./src/js/main.js"],"sourcesContent":["\"use strict\";\r\nclass Tile {\r\n    uncovered = false;\r\n    hasMine = false;\r\n    numOfNearbyMines = 0;\r\n    markedAsEmpty = false;\r\n}\r\n\r\nconst settings = {\r\n    board: {\r\n        rows: 10,\r\n        columns: 10,\r\n        numOfMines: 20\r\n    }\r\n}\r\n\r\nconst gameVars = {\r\n    state: \"initial\", // 3 states available: initial (new game started, waiting for player to uncover first tile), underway (game in progress), finished (game won or lost, no input allowed on board)\r\n    minesLeft: 20,\r\n    time: {\r\n        minutes: 0,\r\n        seconds: 0\r\n    },\r\n    rowMineCount: [],\r\n    columnMineCount: []\r\n}\r\n\r\nlet board = [];\r\n\r\nfunction byId(id) {\r\n    return document.getElementById(id);\r\n}\r\nconst DOM = {\r\n    nav: {\r\n        menuBtn: byId(\"menu-btn\"),\r\n        newGameBtn: byId(\"newgame-btn\"),\r\n        mineCounter: document.querySelector(\"#mine-counter > span\"),\r\n        timer: {\r\n            minutes: byId(\"#timer-minutes\"),\r\n            seconds: byId(\"#timer-seconds\")\r\n        }\r\n    },\r\n    playarea: {\r\n        columnNums: byId(\"column-nums\"),\r\n        rowNums: byId(\"row-nums\"),\r\n        board: {\r\n            tiles: null,\r\n            container: byId(\"board\")\r\n        },\r\n        winOverlay: {\r\n            container: byId(\"win-overlay\"),\r\n            newGameBtn: byId(\"win-new-game-btn\"),\r\n            viewBoardBtn: byId(\"win-view-board-btn\")\r\n        },\r\n        loseOverlay: {\r\n            container: byId(\"lose-overlay\"),\r\n            newGameBtn: byId(\"lose-new-game-btn\"),\r\n            viewBoardBtn: byId(\"lose-view-board-btn\")\r\n        },\r\n    },\r\n    modals: {\r\n        menu: byId(\"menu-modal\")\r\n    }\r\n}\r\n\r\nfunction createEmptyBoard() {\r\n    board = [];\r\n    for (let i=0; i < settings.board.rows; i++) {\r\n        board[i] = [];\r\n        for (let j=0; j < settings.board.columns; j++) {\r\n            board[i][j] = new Tile;\r\n        }\r\n    }\r\n}\r\n\r\nfunction populateBoard(firstTileRow, firstTileColumn, numOfMines) {\r\n    let values = [];\r\n    for (let i=0; i < settings.board.rows; i++) {\r\n        for (let j=0; j < settings.board.columns; j++) {\r\n            values.push({row: i, column: j});\r\n        }\r\n    }\r\n    gameVars.rowMineCount = new Array(settings.board.rows).fill(0);\r\n    gameVars.columnMineCount = new Array(settings.board.columns).fill(0);\r\n    \r\n    let firstTile = values.findIndex(tile => {\r\n        return tile.row == firstTileRow && tile.column == firstTileColumn\r\n    })\r\n\r\n    if (firstTile != -1) {\r\n        values.splice(firstTile, 1);\r\n    }\r\n    board[firstTileRow][firstTileColumn].hasMine = true;\r\n\r\n    for (let i=1; i < numOfMines; i++) {\r\n        let random = Math.floor(Math.random() * values.length);\r\n        board[values[random].row][values[random].column].hasMine = true;\r\n        values.splice(random, 1);\r\n    }\r\n\r\n    // Assign numbers to each tile, and count mines in each row and column\r\n    for (let row in board) {\r\n        for (let column in board[row]) {\r\n            countNearbyMines(parseInt(row), parseInt(column));\r\n            if (board[row][column].hasMine) {\r\n                gameVars.rowMineCount[row]++;\r\n                gameVars.columnMineCount[column]++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkIfTileHasMine(row, column) {\r\n    if (row < 0 || row >= settings.board.rows || column < 0 || column >= settings.board.columns || !board[row][column].hasMine) {\r\n        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nfunction countNearbyMines(row, column) {\r\n    let count = 0;\r\n    for (let i= -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n            if (i==0 && j==0) {\r\n                continue;\r\n            }\r\n            count += checkIfTileHasMine(row+i, column+j);\r\n        }\r\n    }\r\n    board[row][column].numOfNearbyMines = count;\r\n}\r\n\r\nfunction displayEmptyBorderNums() {\r\n    let html = \"\";\r\n\r\n    for (let i=0; i < settings.board.rows; i++) {\r\n        html += `<div>#</div>`;\r\n    }\r\n    DOM.playarea.rowNums.innerHTML = html;\r\n    html = \"\";\r\n\r\n    for (let i=0; i < settings.board.columns; i++) {\r\n        html += `<div>#</div>`;\r\n    }\r\n    DOM.playarea.columnNums.innerHTML = html;\r\n}\r\n\r\nfunction displayBorderNums() {\r\n    let html = \"\";\r\n\r\n    for (let row of gameVars.rowMineCount) {\r\n        html += `<div>${row}</div>`;\r\n    }\r\n    DOM.playarea.rowNums.innerHTML = html;\r\n    html = \"\";\r\n\r\n    for (let column of gameVars.columnMineCount) {\r\n        html += `<div>${column}</div>`;\r\n    }\r\n    DOM.playarea.columnNums.innerHTML = html;\r\n}\r\nfunction displayBoard() {\r\n    let html = \"\";\r\n    for (let row in board) {\r\n        html += `<div>`;\r\n        for (let column in board[row]) {\r\n            html += `<div data-row=\"${row}\" data-column=\"${column}\"></div>`\r\n        }\r\n        html += \"</div>\";\r\n    }\r\n    DOM.playarea.board.container.innerHTML = html;\r\n    DOM.playarea.board.tiles = document.querySelectorAll(\"[data-row][data-column]\");\r\n\r\n    for (let tile of DOM.playarea.board.tiles) {\r\n        tile.addEventListener(\"mousedown\", evt => {\r\n            switch(evt.which) {\r\n                case 1:\r\n                    tileClick(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n                    break;\r\n                case 3:\r\n                    tileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n                    break;\r\n            }\r\n        })\r\n        tile.addEventListener(\"contextmenu\", evt => {\r\n            evt.preventDefault();\r\n            return false;\r\n        })\r\n        tile.addEventListener(\"mouseenter\", evt => {\r\n            if (evt.which == 3) {\r\n                tileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction tileClick(row, column) {\r\n    if (gameVars.state == \"initial\") {\r\n        gameVars.state = \"underway\";\r\n        populateBoard(row, column, settings.board.numOfMines);\r\n        displayBorderNums();\r\n        uncoverTile(row, column);\r\n        DOM.nav.mineCounter.innerHTML = gameVars.minesLeft;\r\n        if (gameVars.nothingToSeeHere) {\r\n            superSecret();\r\n        }\r\n    } else if (gameVars.state == \"underway\") {\r\n        uncoverTile(row, column);\r\n        DOM.nav.mineCounter.innerHTML = gameVars.minesLeft;\r\n    }\r\n}\r\nfunction tileMark(row, column) {\r\n    if (gameVars.state == \"underway\" && !board[row][column].uncovered) {\r\n        board[row][column].markedAsEmpty = !board[row][column].markedAsEmpty;\r\n        if (board[row][column].markedAsEmpty) {\r\n            getDOMTile(row, column).innerHTML = \"X\";\r\n        } else {\r\n            getDOMTile(row, column).innerHTML = \"\";\r\n        }\r\n    }\r\n}\r\nfunction getDOMTile(row, column) {\r\n    return DOM.playarea.board.container.querySelector(`[data-row=\"${row}\"][data-column=\"${column}\"]`);\r\n}\r\n\r\nfunction uncoverTile(row, column, fromMineClick = false, override = false) {\r\n    if ((gameVars.state != \"underway\" && !override) || row < 0 || row >= settings.board.rows || column < 0 || column >= settings.board.columns || board[row][column].uncovered) {\r\n        return null;\r\n    }\r\n    if (board[row][column].hasMine && !board[row][column].markedAsEmpty) {\r\n        getDOMTile(row, column).innerHTML = \"<i class='icon-mine'></i>\";\r\n        getDOMTile(row, column).dataset.clickable = \"false\";\r\n        board[row][column].uncovered = true;\r\n        for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n                if (i==0 && j==0) {\r\n                    continue;\r\n                }\r\n                uncoverTile(row+i, column+j, true, override)\r\n            }\r\n        }\r\n        gameVars.minesLeft--;\r\n        if (gameVars.minesLeft == 0 && gameVars.state == \"underway\") {\r\n            DOM.playarea.winOverlay.container.classList.remove(\"fade\");\r\n            DOM.playarea.winOverlay.container.classList.add(\"visible\");\r\n            DOM.playarea.board.container.classList.add(\"no-input\");\r\n            gameVars.state = \"finished\";\r\n        }\r\n    } else if (fromMineClick) {\r\n        board[row][column].uncovered = true;\r\n        board[row][column].markedAsEmpty = false;\r\n        getDOMTile(row, column).innerHTML = board[row][column].numOfNearbyMines;\r\n        getDOMTile(row, column).dataset.clickable = \"false\";\r\n    } else if (!board[row][column].markedAsEmpty && gameVars.state == \"underway\") {\r\n        getDOMTile(row, column).classList.add(\"wrong-tile\");\r\n        DOM.playarea.loseOverlay.container.classList.remove(\"fade\");\r\n        DOM.playarea.loseOverlay.container.classList.add(\"visible\");\r\n        DOM.playarea.board.container.classList.add(\"no-input\");\r\n        gameVars.state = \"finished\";\r\n    }\r\n}\r\n\r\nfunction uncoverBoard() {\r\n    for (let row in board) {\r\n        for (let column in board[row]) {\r\n            if (board[row][column].hasMine && !board[row][column].uncovered) {\r\n                board[row][column].markedAsEmpty = false;\r\n                uncoverTile(parseInt(row), parseInt(column), false, true);\r\n            } else if (!board[row][column].hasMine && board[row][column].numOfNearbyMines == 0) {\r\n                getDOMTile(row, column).innerHTML = \"#\";\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction newGame() {\r\n    createEmptyBoard();\r\n    displayBoard();\r\n    displayEmptyBorderNums();\r\n    gameVars.state = \"initial\";\r\n    DOM.playarea.board.container.classList.remove(\"no-input\");\r\n    DOM.nav.mineCounter.innerHTML = gameVars.minesLeft = settings.board.numOfMines;\r\n}\r\n\r\nDOM.nav.newGameBtn.addEventListener(\"click\", () => {\r\n    newGame();\r\n});\r\n\r\nDOM.nav.menuBtn.addEventListener(\"click\", () => {\r\n    DOM.modals.menu.classList.remove(\"fade\");\r\n    DOM.modals.menu.classList.add(\"visible\");\r\n})\r\ndocument.querySelectorAll(\".modal-close\").forEach(el => {\r\n    el.addEventListener(\"click\", () => {\r\n        el.parentNode.parentNode.classList.add(\"fade\");\r\n        el.parentNode.parentNode.classList.remove(\"visible\");\r\n    })\r\n})\r\n\r\nDOM.playarea.winOverlay.newGameBtn.addEventListener(\"click\", () => {\r\n    newGame();\r\n    DOM.playarea.winOverlay.container.classList.add(\"fade\");\r\n    DOM.playarea.winOverlay.container.classList.remove(\"visible\");\r\n})\r\nDOM.playarea.winOverlay.viewBoardBtn.addEventListener(\"click\", () => {\r\n    DOM.playarea.winOverlay.container.classList.add(\"fade\");\r\n    DOM.playarea.winOverlay.container.classList.remove(\"visible\");\r\n})\r\nDOM.playarea.loseOverlay.newGameBtn.addEventListener(\"click\", () => {\r\n    newGame();\r\n    DOM.playarea.loseOverlay.container.classList.add(\"fade\");\r\n    DOM.playarea.loseOverlay.container.classList.remove(\"visible\");\r\n})\r\nDOM.playarea.loseOverlay.viewBoardBtn.addEventListener(\"click\", () => {\r\n    DOM.playarea.loseOverlay.container.classList.add(\"fade\");\r\n    DOM.playarea.loseOverlay.container.classList.remove(\"visible\");\r\n    uncoverBoard();\r\n})\r\nnewGame();\r\n\r\nlet foo = \"xyzzy\";\r\nlet bar = 0;\r\nlet nullllun = byId(\"foobar\");\r\ndocument.onkeydown = evt => {\r\n    if (evt.key == foo[bar]) {\r\n        bar++;\r\n    } else {\r\n        bar = 0;\r\n    }\r\n    if (bar >= 5) {\r\n        superSecret();\r\n        gameVars.nothingToSeeHere = true;\r\n        document.onkeydown = evt => {\r\n            if (evt.key == \"Shift\") {\r\n                gameVars.moveAlong = true;\r\n            }\r\n        }\r\n        document.onkeyup = evt => {\r\n            if (evt.key == \"Shift\") {\r\n                gameVars.moveAlong = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction superSecret() {\r\n    DOM.playarea.board.tiles.forEach(el => {\r\n        el.addEventListener(\"mouseover\", () => {\r\n            if (gameVars.moveAlong) {\r\n                if (board[el.dataset.row][el.dataset.column].hasMine) {\r\n                    nullllun.style.backgroundColor = \"#000\";\r\n                } else {\r\n                    nullllun.style.backgroundColor = \"#FFF\";\r\n                }\r\n            }\r\n        })\r\n    })\r\n}"],"names":["$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$Tile","uncovered","hasMine","numOfNearbyMines","markedAsEmpty","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$settings","board","rows","columns","numOfMines","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$gameVars","state","minesLeft","time","minutes","seconds","rowMineCount","columnMineCount","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$board","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$byId","id","document","getElementById","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$DOM","nav","menuBtn","newGameBtn","mineCounter","querySelector","timer","playarea","columnNums","rowNums","tiles","container","winOverlay","viewBoardBtn","loseOverlay","modals","menu","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$checkIfTileHasMine","row","column","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$countNearbyMines","count","i","j","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBoard","html","innerHTML","querySelectorAll","tile","addEventListener","evt","which","firstTileRow","firstTileColumn","values","push","Array","fill","firstTile","findIndex","splice","_i","random","Math","floor","length","parseInt","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$populateBoard","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBorderNums","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverTile","nothingToSeeHere","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$superSecret","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileClick","dataset","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileMark","preventDefault","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$getDOMTile","fromMineClick","override","clickable","classList","remove","add","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$newGame","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$createEmptyBoard","_i2","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayEmptyBorderNums","forEach","el","parentNode","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverBoard","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$bar","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$nullllun","moveAlong","style","backgroundColor","onkeydown","key","onkeyup"],"version":3,"file":"index.9a7cb81e.js.map"}