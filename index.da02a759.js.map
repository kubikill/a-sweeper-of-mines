{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["\"use strict\";\r\n\r\nfunction createEmptyBoard() {\r\n\tboard = [];\r\n\tfor (let i = 0; i < settings.board.rows; i++) {\r\n\t\tboard[i] = [];\r\n\t\tfor (let j = 0; j < settings.board.columns; j++) {\r\n\t\t\tboard[i][j] = new Tile();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction populateBoard(firstTileRow, firstTileColumn, numOfMines) {\r\n\tlet values = [];\r\n\tfor (let i = 0; i < settings.board.rows; i++) {\r\n\t\tfor (let j = 0; j < settings.board.columns; j++) {\r\n\t\t\tvalues.push({\r\n\t\t\t\trow: i,\r\n\t\t\t\tcolumn: j\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tgameVars.rowMineCount = new Array(settings.board.rows).fill(0);\r\n\tgameVars.columnMineCount = new Array(settings.board.columns).fill(0);\r\n\r\n\tlet firstTile = values.findIndex((tile) => {\r\n\t\treturn tile.row == firstTileRow && tile.column == firstTileColumn;\r\n\t});\r\n\r\n\tif (firstTile != -1) {\r\n\t\tvalues.splice(firstTile, 1);\r\n\t}\r\n\tboard[firstTileRow][firstTileColumn].hasMine = true;\r\n\r\n\tfor (let i = 1; i < numOfMines; i++) {\r\n\t\tlet random = Math.floor(Math.random() * values.length);\r\n\t\tboard[values[random].row][values[random].column].hasMine = true;\r\n\t\tvalues.splice(random, 1);\r\n\t}\r\n\r\n\t// Assign numbers to each tile, and count mines in each row and column\r\n\tfor (let row in board) {\r\n\t\tfor (let column in board[row]) {\r\n\t\t\tcountNearbyMines(parseInt(row), parseInt(column));\r\n\t\t\tif (board[row][column].hasMine) {\r\n\t\t\t\tgameVars.rowMineCount[row]++;\r\n\t\t\t\tgameVars.columnMineCount[column]++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction checkIfTileHasMine(row, column) {\r\n\tif (\r\n\t\trow < 0 ||\r\n\t\trow >= settings.board.rows ||\r\n\t\tcolumn < 0 ||\r\n\t\tcolumn >= settings.board.columns ||\r\n\t\t!board[row][column].hasMine\r\n\t) {\r\n\t\treturn 0;\r\n\t} else {\r\n\t\treturn 1;\r\n\t}\r\n}\r\n\r\nfunction countNearbyMines(row, column) {\r\n\tlet count = 0;\r\n\tfor (let i = -1; i <= 1; i++) {\r\n\t\tfor (let j = -1; j <= 1; j++) {\r\n\t\t\tif (i == 0 && j == 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tcount += checkIfTileHasMine(row + i, column + j);\r\n\t\t}\r\n\t}\r\n\tboard[row][column].numOfNearbyMines = count;\r\n}\r\n\r\nfunction displayEmptyBorderNums() {\r\n\tlet html = \"\";\r\n\r\n\tfor (let i = 0; i < settings.board.rows; i++) {\r\n\t\thtml += `<div>#</div>`;\r\n\t}\r\n\tDOM.playarea.rowNums.innerHTML = html;\r\n\thtml = \"\";\r\n\r\n\tfor (let i = 0; i < settings.board.columns; i++) {\r\n\t\thtml += `<div>#</div>`;\r\n\t}\r\n\tDOM.playarea.columnNums.innerHTML = html;\r\n}\r\n\r\nfunction displayBorderNums() {\r\n\tlet html = \"\";\r\n\r\n\tfor (let row of gameVars.rowMineCount) {\r\n\t\thtml += `<div>${row}</div>`;\r\n\t}\r\n\tDOM.playarea.rowNums.innerHTML = html;\r\n\thtml = \"\";\r\n\r\n\tfor (let column of gameVars.columnMineCount) {\r\n\t\thtml += `<div>${column}</div>`;\r\n\t}\r\n\tDOM.playarea.columnNums.innerHTML = html;\r\n}\r\n\r\nfunction displayBoard() {\r\n\tlet html = \"\";\r\n\tfor (let row in board) {\r\n\t\thtml += `<div>`;\r\n\t\tfor (let column in board[row]) {\r\n\t\t\thtml += `<div data-row=\"${row}\" data-column=\"${column}\"></div>`;\r\n\t\t}\r\n\t\thtml += \"</div>\";\r\n\t}\r\n\tDOM.playarea.board.container.innerHTML = html;\r\n\tDOM.playarea.board.tiles = document.querySelectorAll(\r\n\t\t\"[data-row][data-column]\"\r\n\t);\r\n\r\n\tfor (let tile of DOM.playarea.board.tiles) {\r\n\t\ttile.addEventListener(\"mousedown\", (evt) => {\r\n\t\t\tswitch (evt.which) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\ttileClick(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\ttileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t\ttile.addEventListener(\"contextmenu\", (evt) => {\r\n\t\t\tevt.preventDefault();\r\n\t\t\treturn false;\r\n\t\t});\r\n\t\ttile.addEventListener(\"mouseenter\", (evt) => {\r\n\t\t\tif (evt.which == 3) {\r\n\t\t\t\ttileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction tileClick(row, column) {\r\n\tif (gameVars.state == \"initial\") {\r\n\t\tgameVars.state = \"underway\";\r\n\t\tpopulateBoard(row, column, settings.board.numOfMines);\r\n\t\tdisplayBorderNums();\r\n\t\tuncoverTile(row, column);\r\n\t\tDOM.nav.mineCounter.innerHTML = gameVars.minesLeft;\r\n\t\tclockInterval = setInterval(tickClock, 1000);\r\n\t\tif (gameVars.xyzzyActivated) {\r\n\t\t\txyzzyInit();\r\n\t\t}\r\n\t} else if (gameVars.state == \"underway\") {\r\n\t\tuncoverTile(row, column);\r\n\t\tDOM.nav.mineCounter.innerHTML = gameVars.minesLeft;\r\n\t}\r\n}\r\n\r\nfunction tileMark(row, column) {\r\n\tif (gameVars.state == \"underway\" && !board[row][column].uncovered) {\r\n\t\tboard[row][column].markedAsEmpty = !board[row][column].markedAsEmpty;\r\n\t\tif (board[row][column].markedAsEmpty) {\r\n\t\t\tgetDOMTile(row, column).innerHTML = \"X\";\r\n\t\t} else {\r\n\t\t\tgetDOMTile(row, column).innerHTML = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction getDOMTile(row, column) {\r\n\treturn DOM.playarea.board.container.querySelector(\r\n\t\t`[data-row=\"${row}\"][data-column=\"${column}\"]`\r\n\t);\r\n}\r\n\r\nfunction uncoverTile(row, column, fromMineClick = false, override = false) {\r\n\tif (\r\n\t\t(gameVars.state != \"underway\" && !override) ||\r\n\t\trow < 0 ||\r\n\t\trow >= settings.board.rows ||\r\n\t\tcolumn < 0 ||\r\n\t\tcolumn >= settings.board.columns ||\r\n\t\tboard[row][column].uncovered\r\n\t) {\r\n\t\treturn null;\r\n\t}\r\n\tif (board[row][column].hasMine && !board[row][column].markedAsEmpty) {\r\n\t\tgetDOMTile(row, column).innerHTML = \"<i class='icon-mine'></i>\";\r\n\t\tgetDOMTile(row, column).dataset.clickable = \"false\";\r\n\t\tboard[row][column].uncovered = true;\r\n\t\tfor (let i = -1; i <= 1; i++) {\r\n\t\t\tfor (let j = -1; j <= 1; j++) {\r\n\t\t\t\tif (i == 0 && j == 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tuncoverTile(row + i, column + j, true, override);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgameVars.minesLeft--;\r\n\t\tif (gameVars.minesLeft == 0 && gameVars.state == \"underway\") {\r\n\t\t\tDOM.playarea.winOverlay.container.classList.remove(\"fade\");\r\n\t\t\tDOM.playarea.winOverlay.container.classList.add(\"visible\");\r\n\t\t\tDOM.playarea.board.container.classList.add(\"no-input\");\r\n\t\t\tgameVars.state = \"finished\";\r\n\t\t\tclearInterval(clockInterval);\r\n\t\t}\r\n\t} else if (fromMineClick) {\r\n\t\tboard[row][column].uncovered = true;\r\n\t\tboard[row][column].markedAsEmpty = false;\r\n\t\tgetDOMTile(row, column).innerHTML = board[row][column].numOfNearbyMines;\r\n\t\tgetDOMTile(row, column).dataset.clickable = \"false\";\r\n\t} else if (\r\n\t\t!board[row][column].markedAsEmpty &&\r\n\t\tgameVars.state == \"underway\"\r\n\t) {\r\n\t\tgetDOMTile(row, column).classList.add(\"wrong-tile\");\r\n\t\tDOM.playarea.loseOverlay.container.classList.remove(\"fade\");\r\n\t\tDOM.playarea.loseOverlay.container.classList.add(\"visible\");\r\n\t\tDOM.playarea.board.container.classList.add(\"no-input\");\r\n\t\tgameVars.state = \"finished\";\r\n\t\tclearInterval(clockInterval);\r\n\t}\r\n}\r\n\r\nfunction tickClock() {\r\n\tgameVars.time.seconds++;\r\n\tif (gameVars.time.seconds >= 60) {\r\n\t\tgameVars.time.seconds -= 60;\r\n\t\tgameVars.time.minutes++;\r\n\t}\r\n\r\n\tif (gameVars.time.minutes <= 9) {\r\n\t\tDOM.nav.timer.minutes.innerHTML = `0${gameVars.time.minutes}`;\r\n\t} else {\r\n\t\tDOM.nav.timer.minutes.innerHTML = gameVars.time.minutes;\r\n\t}\r\n\tif (gameVars.time.seconds <= 9) {\r\n\t\tDOM.nav.timer.seconds.innerHTML = `0${gameVars.time.seconds}`;\r\n\t} else {\r\n\t\tDOM.nav.timer.seconds.innerHTML = gameVars.time.seconds;\r\n\t}\r\n}\r\n\r\nfunction uncoverBoard() {\r\n\tfor (let row in board) {\r\n\t\tfor (let column in board[row]) {\r\n\t\t\tif (board[row][column].hasMine && !board[row][column].uncovered) {\r\n\t\t\t\tboard[row][column].markedAsEmpty = false;\r\n\t\t\t\tuncoverTile(parseInt(row), parseInt(column), false, true);\r\n\t\t\t} else if (\r\n\t\t\t\t!board[row][column].hasMine &&\r\n\t\t\t\tboard[row][column].numOfNearbyMines == 0\r\n\t\t\t) {\r\n\t\t\t\tgetDOMTile(row, column).innerHTML = \"#\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction newGame() {\r\n\tcreateEmptyBoard();\r\n\tdisplayBoard();\r\n\tdisplayEmptyBorderNums();\r\n\tgameVars.state = \"initial\";\r\n\tclearInterval(clockInterval);\r\n\tgameVars.time.minutes = 0;\r\n\tgameVars.time.seconds = 0;\r\n\tDOM.nav.timer.minutes.innerHTML = \"00\";\r\n\tDOM.nav.timer.seconds.innerHTML = \"00\";\r\n\tDOM.playarea.board.container.classList.remove(\"no-input\");\r\n\tDOM.nav.mineCounter.innerHTML = gameVars.minesLeft =\r\n\t\tsettings.board.numOfMines;\r\n}\r\n\r\nDOM.nav.newGameBtn.addEventListener(\"click\", () => {\r\n\tnewGame();\r\n});\r\n\r\ndocument.querySelectorAll(\"[data-modalopen]\").forEach((el) => {\r\n\tel.addEventListener(\"click\", () => {\r\n\t\tDOM.modals.container.classList.add(\"visible\");\r\n\t\tDOM.modals.container.classList.remove(\"fade\");\r\n\t\tdocument.querySelector(el.dataset.modalopen).classList.add(\"visible\");\r\n\t\tdocument.querySelector(el.dataset.modalopen).classList.remove(\"fade\");\r\n\t});\r\n});\r\ndocument.querySelectorAll(\".modal-close\").forEach((el) => {\r\n\tel.addEventListener(\"click\", () => {\r\n\t\tDOM.modals.container.classList.add(\"fade\");\r\n\t\tDOM.modals.container.classList.remove(\"visible\");\r\n\t\tel.parentNode.parentNode.classList.add(\"fade\");\r\n\t\tel.parentNode.parentNode.classList.remove(\"visible\");\r\n\t});\r\n});\r\ndocument.querySelectorAll(\".modal\").forEach(el => {\r\n\tel.addEventListener(\"click\", evt => {\r\n\t\tif (evt.target === evt.currentTarget) {\r\n\t\t\tDOM.modals.container.classList.add(\"fade\");\r\n\t\t\tDOM.modals.container.classList.remove(\"visible\");\r\n\t\t\tel.classList.add(\"fade\");\r\n\t\t\tel.classList.remove(\"visible\");\r\n\t\t}\r\n\t})\r\n})\r\nDOM.modals.menu.btns.querySelectorAll(\"button\").forEach((el) => {\r\n\tel.addEventListener(\"click\", () => {\r\n\t\tDOM.modals.menu.container.classList.add(\"fade\");\r\n\t\tDOM.modals.menu.container.classList.remove(\"visible\");\r\n\t});\r\n});\r\n\r\nDOM.playarea.winOverlay.newGameBtn.addEventListener(\"click\", () => {\r\n\tnewGame();\r\n\tDOM.playarea.winOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.winOverlay.container.classList.remove(\"visible\");\r\n});\r\nDOM.playarea.winOverlay.viewBoardBtn.addEventListener(\"click\", () => {\r\n\tDOM.playarea.winOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.winOverlay.container.classList.remove(\"visible\");\r\n});\r\nDOM.playarea.loseOverlay.newGameBtn.addEventListener(\"click\", () => {\r\n\tnewGame();\r\n\tDOM.playarea.loseOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.loseOverlay.container.classList.remove(\"visible\");\r\n});\r\nDOM.playarea.loseOverlay.viewBoardBtn.addEventListener(\"click\", () => {\r\n\tDOM.playarea.loseOverlay.container.classList.add(\"fade\");\r\n\tDOM.playarea.loseOverlay.container.classList.remove(\"visible\");\r\n\tuncoverBoard();\r\n});\r\nnewGame();"],"names":["$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$checkIfTileHasMine","row","column","settings","board","rows","columns","hasMine","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$countNearbyMines","count","i","j","numOfNearbyMines","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileClick","gameVars","state","firstTileRow","firstTileColumn","numOfMines","values","push","rowMineCount","Array","fill","columnMineCount","firstTile","findIndex","tile","splice","i1","random","Math","floor","length","parseInt","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$populateBoard","html","DOM","playarea","rowNums","innerHTML","columnNums","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBorderNums","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverTile","nav","mineCounter","minesLeft","clockInterval","setInterval","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tickClock","xyzzyActivated","xyzzyInit","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileMark","uncovered","markedAsEmpty","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$getDOMTile","container","querySelector","fromMineClick","override","dataset","clickable","winOverlay","classList","remove","add","clearInterval","loseOverlay","time","seconds","minutes","timer","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$newGame","Tile","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$createEmptyBoard","tiles","document","querySelectorAll","addEventListener","evt","which","preventDefault","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBoard","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayEmptyBorderNums","newGameBtn","forEach","el","modals","modalopen","parentNode","target","currentTarget","menu","btns","viewBoardBtn","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverBoard"],"version":3,"file":"index.da02a759.js.map"}