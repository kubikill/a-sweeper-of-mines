{"mappings":"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","sources":["./src/js/main.js"],"sourcesContent":["class Tile {\r\n    uncovered = false;\r\n    hasMine = false;\r\n    numOfNearbyMines = 0;\r\n    markedAsEmpty = false;\r\n}\r\n\r\nlet board = [];\r\nlet boardRows = 10;\r\nlet boardColumns = 10;\r\nlet numOfMines = 20;\r\nlet boardRowMineCount = [];\r\nlet boardColumnMineCount = [];\r\nlet gameInProgress = false;\r\n\r\nfunction byId(id) {\r\n    return document.getElementById(id);\r\n}\r\nconst DOM = {\r\n    playarea: {\r\n        columnNums: byId(\"column-nums\"),\r\n        rowNums: byId(\"row-nums\"),\r\n        board: {\r\n            tiles: null,\r\n            container: byId(\"board\")\r\n        }\r\n    }\r\n}\r\n\r\nfunction createEmptyBoard() {\r\n    board = [];\r\n    for (let i=0; i < boardRows; i++) {\r\n        board[i] = [];\r\n        for (let j=0; j < boardColumns; j++) {\r\n            board[i][j] = new Tile;\r\n        }\r\n    }\r\n}\r\n\r\nfunction populateBoard(firstTileRow, firstTileColumn, numOfMines) {\r\n    let values = [];\r\n    for (let i=0; i < boardRows; i++) {\r\n        for (let j=0; j < boardColumns; j++) {\r\n            values.push({row: i, column: j});\r\n        }\r\n    }\r\n    boardRowMineCount = new Array(boardRows).fill(0);\r\n    boardColumnMineCount = new Array(boardColumns).fill(0);\r\n    \r\n    let firstTile = values.findIndex(tile => {\r\n        return tile.row == firstTileRow && tile.column == firstTileColumn\r\n    })\r\n\r\n    if (firstTile != -1) {\r\n        values.splice(firstTile, 1);\r\n    }\r\n    board[firstTileRow][firstTileColumn].hasMine = true;\r\n\r\n    for (let i=1; i < numOfMines; i++) {\r\n        let random = Math.floor(Math.random() * values.length);\r\n        board[values[random].row][values[random].column].hasMine = true;\r\n        values.splice(random, 1);\r\n    }\r\n\r\n    // Assign numbers to each tile, and count mines in each row and column\r\n    for (let row in board) {\r\n        for (let column in board[row]) {\r\n            countNearbyMines(parseInt(row), parseInt(column));\r\n            if (board[row][column].hasMine) {\r\n                boardRowMineCount[row]++;\r\n                boardColumnMineCount[column]++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkIfTileHasMine(row, column) {\r\n    if (row < 0 || row >= boardRows || column < 0 || column >= boardColumns || !board[row][column].hasMine) {\r\n        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nfunction countNearbyMines(row, column) {\r\n    let count = 0;\r\n    for (let i= -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n            if (i==0 && j==0) {\r\n                continue;\r\n            }\r\n            count += checkIfTileHasMine(row+i, column+j);\r\n        }\r\n    }\r\n    board[row][column].numOfNearbyMines = count;\r\n}\r\n\r\nfunction displayBorderNums() {\r\n    let html = \"\";\r\n\r\n    for (let row of boardRowMineCount) {\r\n        html += `<div>${row}</div>`;\r\n    }\r\n    DOM.playarea.rowNums.innerHTML = html;\r\n    html = \"\";\r\n\r\n    for (let column of boardColumnMineCount) {\r\n        html += `<div>${column}</div>`;\r\n    }\r\n    DOM.playarea.columnNums.innerHTML = html;\r\n}\r\nfunction displayBoard() {\r\n    let html = \"\";\r\n    for (let row in board) {\r\n        html += `<div>`;\r\n        for (let column in board[row]) {\r\n            html += `<div data-row=\"${row}\" data-column=\"${column}\"></div>`\r\n        }\r\n        html += \"</div>\";\r\n    }\r\n    DOM.playarea.board.container.innerHTML = html;\r\n    DOM.playarea.board.tiles = document.querySelectorAll(\"[data-row][data-column]\");\r\n\r\n    for (let tile of DOM.playarea.board.tiles) {\r\n        tile.addEventListener(\"mousedown\", evt => {\r\n            switch(evt.which) {\r\n                case 1:\r\n                    tileClick(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n                    break;\r\n                case 3:\r\n                    tileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n                    break;\r\n            }\r\n        })\r\n        tile.addEventListener(\"contextmenu\", evt => {\r\n            evt.preventDefault();\r\n            return false;\r\n        })\r\n        tile.addEventListener(\"mouseenter\", evt => {\r\n            if (evt.which == 3) {\r\n                tileMark(parseInt(tile.dataset.row), parseInt(tile.dataset.column));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction tileClick(row, column) {\r\n    if (!gameInProgress) {\r\n        gameInProgress = true;\r\n        populateBoard(row, column, numOfMines);\r\n        displayBorderNums();\r\n        console.log(board);\r\n    }\r\n    uncoverTile(row, column);\r\n}\r\nfunction tileMark(row, column) {\r\n    if (gameInProgress && !board[row][column].uncovered) {\r\n        board[row][column].markedAsEmpty = !board[row][column].markedAsEmpty;\r\n        if (board[row][column].markedAsEmpty) {\r\n            getDOMTile(row, column).innerHTML = \"X\";\r\n        } else {\r\n            getDOMTile(row, column).innerHTML = \"\";\r\n        }\r\n    }\r\n}\r\nfunction getDOMTile(row, column) {\r\n    return DOM.playarea.board.container.querySelector(`[data-row=\"${row}\"][data-column=\"${column}\"]`);\r\n}\r\n\r\nfunction uncoverTile(row, column, fromMineClick = false) {\r\n    if (row < 0 || row >= boardRows || column < 0 || column >= boardColumns || board[row][column].uncovered) {\r\n        return null;\r\n    }\r\n    if (board[row][column].hasMine && !board[row][column].markedAsEmpty) {\r\n        getDOMTile(row, column).innerHTML = \"#\";\r\n        board[row][column].uncovered = true;\r\n        for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n                if (i==0 && j==0) {\r\n                    continue;\r\n                }\r\n                uncoverTile(row+i, column+j, true)\r\n            }\r\n        }\r\n    } else if (fromMineClick) {\r\n        board[row][column].uncovered = true;\r\n        board[row][column].markedAsEmpty = false;\r\n        getDOMTile(row, column).innerHTML = board[row][column].numOfNearbyMines;\r\n    }\r\n    return null;\r\n}\r\n\r\ncreateEmptyBoard();\r\ndisplayBoard();"],"names":["$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$Tile","uncovered","hasMine","numOfNearbyMines","markedAsEmpty","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$board","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$boardRows","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$boardColumns","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$boardRowMineCount","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$boardColumnMineCount","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$gameInProgress","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$byId","id","document","getElementById","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$DOM","playarea","columnNums","rowNums","board","tiles","container","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$checkIfTileHasMine","row","column","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$countNearbyMines","count","i","j","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileMark","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$getDOMTile","innerHTML","querySelector","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$uncoverTile","fromMineClick","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$createEmptyBoard","html","querySelectorAll","tile","addEventListener","evt","which","firstTileRow","firstTileColumn","numOfMines","values","push","Array","fill","firstTile","findIndex","splice","_i","random","Math","floor","length","parseInt","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$populateBoard","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBorderNums","console","log","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$tileClick","dataset","preventDefault","$88ad7e3f1c0a9a7459bddcf0e7fa9bcc$var$displayBoard"],"version":3,"file":"index.7687b32d.js.map"}